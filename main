import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class main {

    // Regex
    private static final Pattern assignmentPattern = Pattern.compile("([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*(.+)\\s*;");
    private static final Pattern literalPattern = Pattern.compile("0|[1-9][0-9]*");

    private static HashMap<String, Integer> variables = new HashMap<>();

    private static String parseAssignment(String input) {
        Matcher matcher = assignmentPattern.matcher(input);
        if (!matcher.matches()) {
            return "Syntax error";
        }

        String variable = matcher.group(1);
        String value = matcher.group(2);

        if (literalPattern.matcher(value).matches()) {
            variables.put(variable, Integer.parseInt(value));
            return variable + " = " + value;
        }

        if (value.contains("(") && value.contains(")")) {
            int result = evaluateParentheses(variable, value);
            if (result != Integer.MIN_VALUE) {
                variables.put(variable, result);
                return variable + " = " + result;
            }
            return "Invalid expression or uninitialized variable";
        }

        // Arithmetic operations
        String[] parts = value.split("\\s*(\\+|\\-|\\*|\\/)\\s*");
        if (parts.length == 2 && variables.containsKey(parts[0]) && variables.containsKey(parts[1])) {
            int x = variables.get(parts[0]);
            int y = variables.get(parts[1]);
            int result = 0;
            if (value.contains("+")) {
                result = x + y;
            } else if (value.contains("-")) {
                result = x - y;
            } else if (value.contains("*")) {
                result = x * y;
            } else {
                if (y == 0) {
                    return "Division by zero error";
                }
                result = x / y;
            }
            variables.put(variable, result);
            return variable + " = " + result;
        }

        if (variables.containsKey(value)) {
            variables.put(variable, variables.get(value));
            return variable + " = " + variables.get(variable);
        }

        return "Uninitialized variable '" + value + "'";
    }

    private static int evaluateParentheses(String variable, String value) {
        int startIndex = value.indexOf("(");
        int endIndex = value.lastIndexOf(")");
        String expr = value.substring(startIndex + 1, endIndex);
        String[] parts = expr.split("\\s*(\\+|\\-|\\*|\\/)\\s*");
        for (String part : parts) {
            if (!literalPattern.matcher(part).matches() && !variables.containsKey(part)) {
                return Integer.MIN_VALUE;
            }
        }
        int result = 0;
        try {
            result = eval(expr);
        } catch (Exception e) {
            return Integer.MIN_VALUE;
        }
        return result;
    }

    private static int eval(String expr) {
        String[] parts = expr.split("\\s*(\\+|\\-|\\*|\\/)\\s*");
        int result = 0;
        if (parts.length == 2 && variables.containsKey(parts[0]) && variables.containsKey(parts[1])) {
            int x = variables.get(parts[0]);
            int y = variables.get(parts[1]);
            if (expr.contains("+")) {
                result = x + y;
            } else if (expr.contains("-")) {
                result = x - y;
            } else if (expr.contains("*")) {
                result = x * y;
            } else {
                if (y == 0) {
                    throw new ArithmeticException("Division by zero error");
                }
                result = x / y;
            }
        }
        return result;
    }

    private static void interpretProgram(String program) {
        String[] lines = program.split("\n");
        for (String line : lines) {
            String result = parseAssignment(line);
            if (!result.equals("Syntax error") && !result.isEmpty()) {
                System.out.println(result);
            } else if (result.equals("Syntax error")) {
                System.out.println("Syntax error");
                return;
            }
        }
    }

    public static void main(String[] args) {
        String[] inputs = {
                "x = 001;",
                "x_2 = 0;",
                "x = 4;\ny = x;\nz = (x+y) // addition 
        };

        for (int i = 0; i < inputs.length; i++) {
            System.out.println("Output " + (i + 1));
            interpretProgram(inputs[i]);
            System.out.println();
        }
    }
}
