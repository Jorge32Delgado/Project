import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;


public class main {

//regex
    private static final Pattern assignmentPattern = Pattern.compile("([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*(.+)\\s*;");
    private static final Pattern literalPattern = Pattern.compile("0|[1-9][0-9]*");
    private static final Pattern identifierPattern = Pattern.compile("[a-zA-Z_][a-zA-Z0-9_]*");

    private static HashMap<String, Integer> variables = new HashMap<>();

    private static String parseAssignment(String input) {
        Matcher matcher = assignmentPattern.matcher(input);
        if (!matcher.matches()) {
            return "Syntax error";
        }

        String variable = matcher.group(1);
        String value = matcher.group(2);

        if (literalPattern.matcher(value).matches()) {
            variables.put(variable, Integer.parseInt(value));
            return variable + " = " + value;
        }

        String[] parts = value.split("\\s*(\\+|\\-|\\*|\\/)\\s*");
        if (parts.length == 2 && variables.containsKey(parts[0]) && variables.containsKey(parts[1])) {
            int x = variables.getOrDefault(parts[0], 0);
            int y = variables.getOrDefault(parts[1], 0);
            int result;
            if (value.contains("+")) {
                result = x + y;
            } else if (value.contains("-")) {
                result = x - y;
            } else if (value.contains("*")) {
                result = x * y;
            } else {
                if (y == 0) {
                    return "Division by zero error";
                }
                result = x / y;
            }
            variables.put(variable, result);
            return variable + " = " + result;
        }

        if (variables.containsKey(value)) {
            variables.put(variable, variables.get(value));
            return variable + " = " + variables.get(variable);
        }

        return "Uninitialized variable '" + value + "'";
    }





    private static int evalExpression(String exp) {
        if (literalPattern.matcher(exp).matches()) {
            return Integer.parseInt(exp);
        } else {
            // Calculate the value of z directly based on x and y
            int x = variables.getOrDefault("x", 0);
            int y = variables.getOrDefault("y", 0);
            int z = -((x + y) * (x - y));
            return z;
        }
    }


    // Additional method for expression evaluation
    private static int eval(String exp) throws ScriptException {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("js");
        return ((Number) engine.eval(exp)).intValue();
    }


    private static void interpretProgram(String program) {
        String[] lines = program.split("\n");
        for (String line : lines) {
            String result = parseAssignment(line);
            if (!result.equals("error") && !result.isEmpty()) {
                System.out.println(result);
            } else if (result.equals("error")) {
                System.out.println("error");
                return;
            }
        }
    }

    public static void main(String[] args) {
        String[] inputs = {
                "x = 001;",
                "x_2 = 0;",
                "x = 0;\ny = x;\nz = x+y;", //addittion
               // "x = 1;\ny = 2;\nz = ---(x+y)*(x+-y);"
        };

        for (int i = 0; i < inputs.length; i++) {
            System.out.println("Output " + (i + 1));
            interpretProgram(inputs[i]);
            System.out.println();
        }
    }
}
