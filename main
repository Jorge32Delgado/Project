import java.util.HashMap;
import java.util.Stack;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class main {
//Regex
    private static final Pattern assignmentPattern = Pattern.compile("([a-zA-Z_][a-zA-Z0-9_]*)\\s*=\\s*(.+)\\s*;");
    private static final Pattern literalPattern = Pattern.compile("0|[1-9][0-9]*");

    private static HashMap<String, Integer> variables = new HashMap<>();

    private static String parseAssignment(String input) {
        Matcher matcher = assignmentPattern.matcher(input);
        if (!matcher.matches()) {
            return "Syntax error";
        }

        String variable = matcher.group(1);
        String value = matcher.group(2);

        if (literalPattern.matcher(value).matches()) {
            variables.put(variable, Integer.parseInt(value));
            return variable + " = " + value;
        }

        try {
            int result = evaluateExpression(value);
            variables.put(variable, result);
            return variable + " = " + result;
        } catch (Exception e) {
            return "Invalid expression";
        }
    }

    private static int evaluateExpression(String expr) {
        Stack<Integer> operands = new Stack<>();
        Stack<Character> operators = new Stack<>();
        boolean negation = false;

        for (int i = 0; i < expr.length(); i++) {
            char ch = expr.charAt(i);
            if (ch == '-') {
                if (i == 0 || expr.charAt(i - 1) == '(') {
                    negation = !negation;
                    continue;
                }
            }
            if (ch == '(') {
                int openCount = 1;
                int closeCount = 0;
                int endIndex = i;
                while (openCount != closeCount && endIndex < expr.length() - 1) {
                    endIndex++;
                    if (expr.charAt(endIndex) == '(') {
                        openCount++;
                    } else if (expr.charAt(endIndex) == ')') {
                        closeCount++;
                    }
                }
                if (endIndex == expr.length() - 1 && openCount != closeCount) {
                    throw new IllegalArgumentException("Invalid expression");
                }
                int result = evaluateExpression(expr.substring(i + 1, endIndex));
                operands.push(negation ? -result : result);
                negation = false;
                i = endIndex;
            } else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
                // Handle operators
                while (!operators.isEmpty() && hasPrecedence(ch, operators.peek())) {
                    int result = applyOperation(operands.pop(), operands.pop(), operators.pop());
                    operands.push(result);
                }
                operators.push(ch);
            } else if (Character.isLetterOrDigit(ch)) {
                StringBuilder sb = new StringBuilder();
                while (i < expr.length() && (Character.isLetterOrDigit(expr.charAt(i)) || expr.charAt(i) == '_')) {
                    sb.append(expr.charAt(i++)); //Negation
                }
                i--;
                String var = sb.toString();
                if (variables.containsKey(var)) {
                    operands.push(negation ? -variables.get(var) : variables.get(var));
                    negation = false;
                } else {
                    throw new IllegalArgumentException("Invalid expression");
                }
            }
        }

        while (!operators.isEmpty()) {
            int result = applyOperation(operands.pop(), operands.pop(), operators.pop());
            operands.push(result);
        }
        return operands.pop();
    }

    private static int applyOperation(int b, int a, char operator) {
        switch (operator) {
            case '+':
                return a + b;
            case '-':
                return a - b;
            case '*':
                return a * b;
            case '/':
                if (b == 0) {
                    throw new ArithmeticException("Division by zero error");
                }
                return a / b;
        }
        return 0;
    }

    private static boolean hasPrecedence(char op1, char op2) {
        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) {
            return false;
        }
        return true;
    }

    private static void interpretProgram(String program) {
        String[] lines = program.split("\n");
        for (String line : lines) {
            String result = parseAssignment(line);
            if (!result.equals("Syntax error") && !result.isEmpty()) {
                System.out.println(result);
            } else if (result.equals("Syntax error")) {
                System.out.println("Syntax error");
                return;
            }
        }
    }

    public static void main(String[] args) {
        String[] inputs = {
                "x = 001;",
                "x_2 = 0;",
                "x = 3;\ny = x;\nz = (-x)*(x+y);" // one negation
        };

        for (int i = 0; i < inputs.length; i++) {
            System.out.println("Output " + (i + 1));
            interpretProgram(inputs[i]);
            System.out.println();
        }
    }
}
